###Â PROTOCOL DOCS
'JOIN [username]' -
  * Sent by: client or server
  * Response: 'JOIN [username]' is broadcast (only if sent by client)

'LEAVE [username]' - 
  * Sent by: server
  * Response: none

'CHAT [message]' - 
  * Sent by: client
  * Response: 'CHAT [username] [message]' is broadcast (given that a valid username is set)

'CHAT [username] [message]' - 
  * Sent by: server
  * Response: none

'LIST' - 
  * Sent by: client
  * Response: 'LIST [username 1] [username 2] [username n]'

'LIST [username 1] [username 2] [username n]' - 
  * Sent by: server
  * Response: none

'USERNAME [new name]' - 
  * Sent by: client
  * Response: none

# DESIGN CHOICES SUMMARY
  * Multiple people can have the same username for simplicity's sake, this however means whoever picked that username first will get_digit
    all the messages sent to that username
  * Dictionary used for commands/protocol functions, making heavy use of splitting a protocol into it's operator and operands
    very scalable with little code overhead.
  * Curses for a simple command-line interface client.
  * Disallowing of spaces in usernames so they can be used in the protocol as separators, this has little impact on the user but keeps
    the code lightweight.
  * Note: split_command would be put in a common utils.py file but I'm not sure if extra files are allowed so I copied it into both client & server.